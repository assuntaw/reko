<h1>hello friend of <%= @user.to_s %></h1>
<form id="formSubmitName">
  <input id="inputName" name="beta_applicant[name]" type="text" placeholder="input your name">
  <button>submit your name</button>
</form>

<form id="formAjaxSearch" class="visible">
  <input id="inputKeyword" name="" type="text" placeholder="search for movies">
</form>

<div id="search-cards-container">
  <!-- WILL GET DYNAMICALLY POPULATED WITH NEW CARDS -->
</div>

<button id="sendRekosButton" disabled>SEND TO ALLAN</button>
<div id="serverResponseDiv"></div>
<script>
  // SEND POST REQUEST
  sendRekosButton.addEventListener("click", (event) => {
    // console.log(event);
    cards = document.querySelectorAll(".selected");
    cards.forEach((card) => {
      sendPostRequestToCreateReko(card);
      console.log("sended POST");
    });
    console.log("redirecting NOW");
    window.location = `/thankyou?token=${token}&name=${senderName}`;
  });


  const sendPostRequestToCreateReko = (card) => {
    const xhr = new XMLHttpRequest();
    // DATA TO SEND
    const toSend = {
      authenticity_token: "<%= session[:_csrf_token] %>",
      reko: {
        itunes_id: card.dataset.itunes_id,
        title: card.dataset.title,
        image_url: card.dataset.image_url,
        genre: card.dataset.genre,
        sender_name: senderName,
        token: token
      }
    };
    // DISPLAY SERVER RESPONSE
    xhr.onload = function () {
      console.log("Yay, we got an answer from the server (request response)");
      console.log(this);
    };

    console.log(toSend);
    xhr.open("POST", "/rekos");
    xhr.setRequestHeader("Content-type", "application/json");
    xhr.send(JSON.stringify(toSend));
  };

</script>

<style>
  .invisible {
    opacity: 0;
    transition: 0.5s ease;
  }
  .visible {
    opacity: 1;
    transition: opacity 0.5s ease;
  }

  #search-cards-container {
    display: flex;
    flex-wrap: wrap;
  }
  .search-card {
    width: 130px;
    max-width: 130px;
    height: 230px;
    max-height: 230px;
    display: inline;
    border: 1px solid red;
    margin: 10px;
    border: 10px solid transparent;
  }
  .search-card > img {
    width: 100%;
    height: 84%;
  }
  .search-card > p {
    margin: 0;
  }
  .search-card.selected {
    border: 10px solid green;
  }
</style>

<script>
  // LOG MESSAGE
  console.log("hello from inline script!");
  // FINAL DATA
  let senderName;
  const token = document.URL.split("token=")[1];
  let movies = [];
  // LOAD ALL DOM ELEMENTS
  const formSubmitName = document.getElementById("formSubmitName");
  const formAjaxSearch = document.getElementById("formAjaxSearch");
  const inputName = document.getElementById("inputName");
  const inputKeyword = document.getElementById("inputKeyword");
  const cardsContainer = document.getElementById("search-cards-container");
  const sendRekosButton = document.getElementById("sendRekosButton");

  // ADD EVENTLISTENERS FOR SELECTION
  const addSelectionListener = (card) => {
    card.addEventListener("click", (event) => {
      event.currentTarget.classList.toggle("selected");
      setButtonState();
    });
  };

  // ENABLE BUTTON IF ELEMENTS ARE SELECTED
  const setButtonState = () => {
    if (document.querySelectorAll(".selected").length > 0) {
      sendRekosButton.disabled = false;
    } else {
      sendRekosButton.disabled = true;
    }
  };

  // ADD EVENTLISTENERS FOR "transitioned" event! (loop over all types of transitioned)
  "transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd".split(" ").forEach((event) => {
    formSubmitName.addEventListener(event, () => { // webkitTransitionEnd oTransitionEnd MSTransitionEnd"
      formAjaxSearch.classList.remove("invisible");
      formAjaxSearch.classList.add("visible");
    });
  })
  formSubmitName.addEventListener("submit", (event) => {
    event.preventDefault();
    if (inputName.value.length < 2) {
      alert("your name has to few letters!");
    } else {
      senderName = inputName.value;
      alert(`${senderName} captured!`);
      formSubmitName.classList.add("invisible");
    }
  });

  // ADD EVENTLISTENER FOR AJAX CALL
  inputKeyword.addEventListener("keyup", (event)=> {
    apiCall(inputKeyword.value);
  });

  const normalize = searchTerm => {
    return searchTerm.replace(/ /g, '+');
  };

  // ITUNES API CALL FROM JS
  const apiCall = (searchTerm) => {
    // NEEDED TO PREVENT CORS FAILURE? -> do more research on it when time...
    // const proxyurl = "https://cors-anywhere.herokuapp.com/";
    // fetch(proxyurl + url)
    const url = "https://itunes.apple.com/search?media=movie&term=" + normalize(searchTerm); //

    fetch(url)
    .then((response) => response.json())
    .then((data) => {
      let movies = [];
      data.results.forEach((result) => { // loop over all results
        if (result.kind === "feature-movie") {
          const movie = buildMovie(result);
          movies.push(movie);
        }
      });
      deleteCardsIfNotSelected(); // reset cards
      addCards(movies);
      addSelectionListener(document.getElementById("search-cards-container"));
    });
  };

  const buildMovie = (apiResultObject) => {
    return {
      "title": apiResultObject.trackName,
      "artworkUrl": resizeImage(apiResultObject.artworkUrl100),
      "itunesId": apiResultObject.trackId,
      "primaryGenreName": apiResultObject.primaryGenreName,
    }
  };

  const deleteCardsIfNotSelected = () => {
    const cards = document.querySelectorAll(".search-card");
    cards.forEach((card) => {
      if (card.classList.contains("selected") != true) {
        removeElement(card);
      }
    });
  };

  const removeElement = (el) => {
    el.parentNode.removeChild(el);
  };

  const addCards = (movies) => {
    movies.forEach((movie) => {
      const card = buildCard(movie);
      addSelectionListener(card);
      cardsContainer.insertAdjacentElement('beforeend', card);
    });
  };

  const deleteChildren = (element) => {
    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }
  };

  const addChild = (element, movie) => {
    element.insertAdjacentHTML("beforeend", `<p>${movie.title}</p>`);
  };

  const buildCard = (movie) => {
    // create div with class "search-card"
    const searchCard = createElementCustom("div", ["search-card"]);
    // set dataset attributes (for ruby backend!)
    searchCard.dataset.title = movie.title;
    searchCard.dataset.image_url = movie.artworkUrl;
    searchCard.dataset.itunes_id = movie.itunesId;
    searchCard.dataset.genre = movie.primaryGenreName;
    searchCard.dataset.sender_name = senderName;
    // create image with src="[movie.artworkUrl]" and alt="[movie.title]"
    const img = createImageCustom(movie.artworkUrl, movie.title);
    // create h2 element with value [movie.title]
    const title = document.createElement("p");
    title.innerText = movie.title;
    // append img and h2 tag to the search-card
    insertElements(searchCard, [img, title]);
    return searchCard
  };

  const createElementCustom = (tagname, classnameArr) => {
    const el = document.createElement(tagname);
    classnameArr.forEach((classname) => {
      el.classList.add(`${classname}`);
    });
    return el
  };

  const createImageCustom = (src, altText) => {
    const img = document.createElement('img');
    img.src = src;
    img.alt = altText;
    return img
  };

  const insertElements = (parent, childsArr) => {
    childsArr.forEach((child) => {
      parent.insertAdjacentElement('beforeend', child);
    });
  };

  const resizeImage = (url) => {
    return url.replace("100x100bb.jpg", "400x400bb.jpg");
  };
</script>




